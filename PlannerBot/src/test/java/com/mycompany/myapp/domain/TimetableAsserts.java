package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class TimetableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableAllPropertiesEquals(Timetable expected, Timetable actual) {
        assertTimetableAutoGeneratedPropertiesEquals(expected, actual);
        assertTimetableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableAllUpdatablePropertiesEquals(Timetable expected, Timetable actual) {
        assertTimetableUpdatableFieldsEquals(expected, actual);
        assertTimetableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableAutoGeneratedPropertiesEquals(Timetable expected, Timetable actual) {
        assertThat(expected)
            .as("Verify Timetable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableUpdatableFieldsEquals(Timetable expected, Timetable actual) {
        assertThat(expected)
            .as("Verify Timetable relevant properties")
            .satisfies(e -> assertThat(e.getAppUserId()).as("check appUserId").isEqualTo(actual.getAppUserId()))
            .satisfies(e -> assertThat(e.getDayOfWeek()).as("check dayOfWeek").isEqualTo(actual.getDayOfWeek()))
            .satisfies(e -> assertThat(e.getDateOfActivity()).as("check dateOfActivity").isEqualTo(actual.getDateOfActivity()))
            .satisfies(
                e ->
                    assertThat(e.getStartTime())
                        .as("check startTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getStartTime())
            )
            .satisfies(
                e -> assertThat(e.getEndTime()).as("check endTime").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getEndTime())
            )
            .satisfies(e -> assertThat(e.getActivity()).as("check activity").isEqualTo(actual.getActivity()))
            .satisfies(e -> assertThat(e.getIsDone()).as("check isDone").isEqualTo(actual.getIsDone()))
            .satisfies(e -> assertThat(e.getLevelOfImportance()).as("check levelOfImportance").isEqualTo(actual.getLevelOfImportance()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableUpdatableRelationshipsEquals(Timetable expected, Timetable actual) {}
}
